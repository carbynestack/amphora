<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2021 - for information on the respective copyright owner
  ~ see the NOTICE file and/or the repository https://github.com/carbynestack/amphora.
  ~
  ~ SPDX-License-Identifier: Apache-2.0
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>amphora-service</artifactId>
    <name>Amphora Service</name>
    <description>Amphora bucket/object store service.</description>
    <parent>
        <groupId>io.carbynestack</groupId>
        <artifactId>amphora</artifactId>
        <version>0.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <properties>
        <!-- skip docker build by default -->
        <dockerfile.skip>true</dockerfile.skip>
        <docker.baseImage>ghcr.io/carbynestack/ubuntu-java-openjre:8-dev</docker.baseImage>

        <!-- Plugin versions -->
        <spotify.dockerfile-maven.version>1.4.13</spotify.dockerfile-maven.version>

        <!-- external lib versions -->
        <aspectj-weaver.version>1.9.7</aspectj-weaver.version>
        <commons-io.version>2.6</commons-io.version>
        <docker-maven-plugin.version>0.34.1</docker-maven-plugin.version>
        <findbugs.version>3.0.2</findbugs.version>
        <guava-retrying.version>2.0.0</guava-retrying.version>
        <jedis.version>3.2.0</jedis.version>
        <mariadb-java-client.version>2.2.0</mariadb-java-client.version>
        <minio-sdk.version>8.2.1</minio-sdk.version>
        <postgresql-java-client.version>42.2.1</postgresql-java-client.version>
        <spring-boot.version>2.2.4.RELEASE</spring-boot.version>
        <spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>
        <spring-data-redis.version>2.2.4.RELEASE</spring-data-redis.version>

        <!-- test dependencies -->
        <testcontainer.postgresql.version>1.15.3</testcontainer.postgresql.version>
    </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!-- internal dependencies -->
        <dependency>
            <groupId>io.carbynestack</groupId>
            <artifactId>amphora-common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.carbynestack</groupId>
            <artifactId>amphora-java-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.carbynestack</groupId>
            <artifactId>castor-common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.carbynestack</groupId>
            <artifactId>castor-java-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.carbynestack</groupId>
            <artifactId>mp-spdz-integration</artifactId>
        </dependency>

        <!-- external dependencies -->
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>${findbugs.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj-weaver.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>${spring-data-redis.version}</version>
        </dependency>
        <!-- use spring-security to avoid jackson vulnerabilities -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>

        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>${jedis.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons-io.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.rholder</groupId>
            <artifactId>guava-retrying</artifactId>
            <version>${guava-retrying.version}</version>
        </dependency>
        <!--PostgreSQL Driver-->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql-java-client.version}</version>
        </dependency>
        <!--S3 Client-->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <version>${minio-sdk.version}</version>
        </dependency>

        <!--test dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-inline</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>${testcontainer.postgresql.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <resources>
            <resource>
                <directory>${project.basedir}/..</directory>
                <includes>
                    <include>LICENSE</include>
                    <include>NOTICE.md</include>
                </includes>
            </resource>
            <resource>
                <targetPath>3RD-PARTY-LICENSES</targetPath>
                <directory>${project.basedir}/3RD-PARTY-LICENSES</directory>
                <excludes>
                    <exclude>module.name</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.yml</include>
                    <include>banner.txt</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>com.github.jinnovations</groupId>
                <artifactId>attribution-maven-plugin</artifactId>
            </plugin>
            <!-- makes fat jar including Spring Boot start env executable -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <classifier>exec</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${spotify.dockerfile-maven.version}</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-latest</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <tag>latest</tag>
                            <skipDockerInfo>true</skipDockerInfo>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <repository>ghcr.io/carbynestack/${project.artifactId}</repository>
                    <tag>${project.version}</tag>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
